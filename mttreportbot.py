import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ChatType
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("7705193251:AAFQPcT5iNqlu4bnlcjV_lYjjZ7GZWzZHj4")
ADMIN_CHAT_ID = os.getenv("-1002651165474")  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /report @username –ø—Ä–∏—á–∏–Ω–∞, —á—Ç–æ–±—ã –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message_handler(commands=['report'])
async def report_command(message: Message):
    if message.chat.type != ChatType.SUPERGROUP:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /report @username –ø—Ä–∏—á–∏–Ω–∞")
        return
    
    username = args[1]
    reason = args[2]
    report_text = (f"üö® *–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç!*
üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
‚ùó –ü—Ä–∏—á–∏–Ω–∞: {reason}
üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{message.from_user.username}")
    
    await bot.send_message(ADMIN_CHAT_ID, report_text, parse_mode="Markdown")
    await message.reply("–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!")

if __name__ == "__main__":

    executor.start_polling(dp, skip_updates=True)
